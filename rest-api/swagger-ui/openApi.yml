openapi: 3.0.1
info:
  title: RoT API
  version: 1.0.0
servers:
  - url: http://localhost:3000
  - url: http://165.22.83.18:3000
    description: Generated server url

paths:
  /api/v1/register:
    post:
      tags:
        - Authentification
      operationId: register
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request
          content:
            text/plain:
              schema:
                type: string  
    
  /api/v1/login:
    post:
      tags:
        - Authentification
      operationId: login
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginCreds'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        '400':
          description: Bad Request
          content:
            text/plain:
              schema:
                type: string
  
  /api/v1/signcategories:
    get:
      tags:
        - SignCategories
      operationId: getSignCategories
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SignCategoryResponse'
        '404':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    post:
      tags:
        - SignCategories
      operationId: createSignCategory
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/SignCategoryRequest'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SignCategoryResponse'
        '404':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/v1/signcategories/{id}:
    get:
      tags:
        - SignCategories
      operationId: getSignCategoriesById
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SignCategoryResponse'
        '404':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    delete:
      tags:
        - SignCategories
      operationId: deleteSignCategory
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SignCategoryResponse'
        '404':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    put:
      tags:
        - SignCategories
      operationId: updateSignCategory
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/SignCategoryRequest'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SignCategoryResponse'
        '404':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  
  /api/v1/signcategories/{category_id}/signs:
    get:
      tags:
        - Signs
      operationId: getSignsByCategory
      parameters:
        - name: category_id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SignResponse'
        '404':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  
  /api/v1/signs/{id}:
    get:
      tags:
        - Signs
      operationId: getSignById
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SignResponse'
        '404':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      tags:
        - Signs
      operationId: deleteSign
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SignResponse'
        '404':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    put:
      tags:
        - Signs
      operationId: updateSign
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/SignRequest'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SignResponse'
        '404':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  
  /api/v1/signs:
    post:
      tags:
        - Signs
      operationId: createSign
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/SignRequest'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SignResponse'
        '404':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    
    get:
      tags:
        - Signs
      operationId: getSigns
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SignResponse'
        '404':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    
  /api/v1/signs/nextsign/{sign_id}/{category_id}:
    get:
      tags:
        - Signs
      operationId: getNextSign
      parameters:
        - name: sign_id
          in: path
          required: true
          schema:
            type: string
        - name: category_id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SignResponse'
        '404':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/v1/signs/prevsign/{sign_id}/{category_id}:
    get:
      tags:
        - Signs
      operationId: getPrevSign
      parameters:
        - name: sign_id
          in: path
          required: true
          schema:
            type: string
        - name: category_id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SignResponse'
        '404':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  
  /api/v1/advices:
    get:
      tags:
        - Advices
      operationId: getAdvices
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdviceResponse'
        '404':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    
    post:
      tags:
        - Advices
      operationId: createAdvice
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/AdviceRequest'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdviceResponse'
        '404':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  
  /api/v1/advices/{id}:
    get: 
      tags:
        - Advices
      operationId: getAdviceById
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdviceResponse'
        '404':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    
    delete:
      tags:
        - Advices
      operationId: deleteAdvice
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdviceResponse'
        '404':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    
    put:
      tags:
        - Advices
      operationId: updateAdvice
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/AdviceRequest'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdviceResponse'
        '404':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  
  /api/v1/advices/nextadvice/{advice_id}: 
    get:
      tags:
        - Advices
      operationId: getNextAdvice
      parameters:
        - name: advice_id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdviceResponse'
        '404':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  
  /api/v1/advices/prevadvice/{advice_id}:
    get:
      tags:
        - Advices
      operationId: getPrevAdvice
      parameters:
        - name: advice_id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdviceResponse'
        '404':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  
  /api/v1/courses:
    get:
      tags:
        - Courses
      operationId: getCourses
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CourseResponse'
        '404':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    post:
      tags:
        - Courses
      operationId: createCourse
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CourseRequest'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CourseResponse'
        '404':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  
  /api/v1/courses/{id}:
    get:
      tags:
        - Courses
      operationId: getCourseById
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CourseResponse'
        '404':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    delete:
      tags:
        - Courses
      operationId: deleteCourse
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CourseResponse'
        '404':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    
    put:
      tags:
        - Courses
      operationId: updateCourse
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CourseRequest'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CourseResponse'
        '404':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  

  /api/v1/courses/{course_id}/chapters:
    get:
      tags:
        - Chapters
      operationId: getChaptersByCourseId
      parameters:
        - name: course_id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChapterResponse'
        '404':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/v1/chapters:
    post:
      tags:
        - Chapters
      operationId: createChapter
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChapterRequest'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChapterResponse'
        '404':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  
  /api/v1/chapters/{chapter_id}:
    get:
      tags:
        - Chapters
      operationId: getChapterById
      parameters:
        - name: chapter_id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChapterResponse'
        '404':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    put:
      tags:
        - Chapters
      operationId: updateChapter
      parameters:
        - name: chapter_id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChapterRequest'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChapterResponse'
        '404':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    delete:
      tags:
        - Chapters
      operationId: deleteChapter
      parameters:
        - name: chapter_id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChapterResponse'
        '404':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      get:
        tags:
          - Chapters
        operationId: getChapterById
        parameters:
          - name: chapter_id
            in: path
            required: true
            schema:
              type: string
        responses:
          '200':
            description: OK
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ChapterResponse'
          '404':
            description: Bad Request
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ErrorResponse'
  
  /api/v1/chapters/{chapter_id}/contents:
    get:
      tags:
        - ChapterContents
      operationId: getContentsByChapterId
      parameters:
        - name: chapter_id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChapterContentResponse'
        '404':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      tags:
        - ChapterContents
      operationId: deleteContent
      parameters:
        - name: chapter_id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChapterContentResponse'
        '404':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/v1/chapters/{chapter_id}/contents/append:
    put:
      tags:
        - ChapterContents
      operationId: appendContent
      parameters:
        - name: chapter_id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Content'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChapterContentResponse'
        '404':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/v1/chapters/prevchapter/{chapter_id}/{course_id}:
    get:
      tags:
        - Chapters
      operationId: getPrevChapter
      parameters:
        - name: chapter_id
          in: path
          required: true
          schema:
            type: string
        - name: course_id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChapterResponse'
        '404':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/v1/chapters/nextchapter/{chapter_id}/{course_id}:
    get:
      tags:
        - Chapters
      operationId: getNextChapter
      parameters:
        - name: chapter_id
          in: path
          required: true
          schema:
            type: string
        - name: course_id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChapterResponse'
        '404':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'


  /api/v1/tests:
    get:
      tags:
        - Tests
      operationId: getTests
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TestResponse'
        '404':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    post:
      tags:
        - Tests
      operationId: createTest
      requestBody:
        description: Test object that needs to be added to the database
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateTestRequest'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TestResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/v1/tests/{id}:
    get:
      tags:
        - Tests
      operationId: getTestById
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TestResponse'
        '404':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    patch:
      tags:
        - Tests
      operationId: updateTestById
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        description: Test object that needs to be updated in the database
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TestResponse'
        '404':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'


    delete:
      tags:
        - Tests
      operationId: deleteTestById
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: No Content
        '404':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/v1/tests/index/{id}:
    get:
      tags:
        - Tests
      operationId: getTestIndexById
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TestIndexResponse'
        '404':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/v1/upload/questions:
    post:
      tags:
        - Questions
      operationId: uploadQuestions
      requestBody:
        description: Questions object that needs to be added to the database
        required: true
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/QuestionUploadRequest'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QuestionResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/v1/questions:
    get:
      tags:
        - Questions
      operationId: getQuestions
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QuestionResponse'
        '404':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    post:
      tags:
        - Questions
      operationId: createQuestion
      requestBody:
        description: Question object that needs to be added to the database
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/QuestionRequest'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QuestionResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/v1/questions/{id}:
    get:
      tags:
        - Questions
      operationId: getQuestionById
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QuestionResponse'
        '404':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    delete:
      tags:
        - Questions
      operationId: deleteQuestionById
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: No Content
        '404':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    patch:
      tags:
        - Questions
      operationId: updateQuestionById
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        description: Question object that needs to be updated in the database
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/QuestionRequest'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QuestionResponse'
        '404':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    
  /api/v1/scores:
    post:
      tags:
        - Scoreboard
      operationId: updateScore
      requestBody:
        description: Score object that needs to be updated in the database
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Score'
            
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/userResponse'
        '404':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/v1/user/top:
    get:
      tags:
        - Scoreboard
      operationId: getTopUsers
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserTopResponse'
        '404':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/v1/user/tests:
    get:
      tags:
        - Scoreboard
      operationId: getUserTests
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserTestResponse'
        '404':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  
  /api/v1/scores/test:
    post:
      tags:
        - Scoreboard
      operationId: createScore
      requestBody:
        description: Score for a test that needs to be added to the database
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TestScoreRequest'
      responses:
        '200':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TestScoreResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/v1/export/csv/signcategories:
    get:
      tags:
        - Export
      operationId: exportSignCategories
      responses:
        '200':
          description: OK
          content:
            text/csv:
              schema:
                type: string
        '404':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/v1/export/json/signcategories:
    get:
      tags:
        - Export
      operationId: exportSignCategories
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SignCategoryResponse'
        '404':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/v1/export/csv/signcategories/{category_id}/signs:
    get:
      tags:
        - Export
      operationId: exportSignsByCategoryId
      parameters:
        - name: category_id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            text/csv:
              schema:
                type: string
        '404':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/v1/export/json/signcategories/{category_id}/signs:
    get:
      tags:
        - Export
      operationId: exportSignsByCategoryId
      parameters:
        - name: category_id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SignResponse'
        '404':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/v1/export/csv/chapters/{chapter_id}/contents:
    get:
      tags:
        - Export
      operationId: exportContentsByChapterId
      parameters:
        - name: chapter_id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            text/csv:
              schema:
                type: string
        '404':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/v1/export/json/chapters/{chapter_id}/contents:
    get:
      tags:
        - Export
      operationId: exportContentsByChapterId
      parameters:
        - name: chapter_id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContentResponse'
        '404':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/v1/export/csv/advices:
    get:
      tags:
        - Export
      operationId: exportAdvices
      responses:
        '200':
          description: OK
          content:
            text/csv:
              schema:
                type: string
        '404':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/v1/export/json/advices:
    get:
      tags:
        - Export
      operationId: exportAdvices
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdviceResponse'
        '404':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

components:
  securitySchemes:
    bearerAuth:        
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    User:
      type: object
      properties:
        username:
          type: string
        email:
          type: string
        password:
          type: string

    LoginCreds:
      type: object
      properties:
        username:
          type: string
        password:
          type: string

    LoginResponse:
      type: object
      properties:
        accessToken:
          type: string
    
    SignCategory:
      type: object
      properties:
        _id:
          type: string
        title:
          type: string
        image_url:
          type: string

    SignCategoryResponse:
      type: object 
      properties:
        success:
         type: boolean
        data:
          type: array
          items:
            $ref: '#/components/schemas/SignCategory'
        message:
          type: string
    
    SignCategoryRequest:
      type: object
      properties:
        title:
          type: string
        file:
          type: file

    Sign:
      type: object
      properties:
        _id:
          type: string
        title:
          type: string
        image_url:
          type: string
        description:
          type: string
        parentId:
          type: string
        __v:
          type: number

    SignRequest:
      type: object
      properties:
        title:
          type: string
        file:
          type: file
        description:
          type: string
        parentId:
          type: string
    
    SignResponse:
      type: object 
      properties:
        success:
         type: boolean
        data:
          type: array
          items:
            $ref: '#/components/schemas/Sign'
        message:
          type: string

    Advice:
      type: object
      properties:
        _id:
          type: string
        title:
          type: string
        image_url:
          type: string
        description:
          type: string
        __v:
          type: number

    AdviceRequest:
      type: object
      properties:
        title:
          type: string
        file:
          type: file
        description:
          type: string

    AdviceResponse:
      type: object 
      properties:
        success:
         type: boolean
        data:
          type: array
          items:
            $ref: '#/components/schemas/Advice'
        message:
          type: string

    Course:
      type: object
      properties:
        _id:
          type: string
        title:
          type: string
        image_url:
          type: string
        description:
          type: string
        __v:
          type: number
    
    CourseRequest:
      type: object
      properties:
        title:
          type: string
        image_url:
          type: string
        description:
          type: string
    
    CourseResponse:
      type: object 
      properties:
        success:
         type: boolean
        data:
          type: array
          items:
            $ref: '#/components/schemas/Course'
        message:
          type: string
    
    Chapter:
      type: object
      properties:
        _id:
          type: string
        title:
          type: string
        parentId:
          type: string
        __v:
          type: number
    
    ChapterRequest:
      type: object
      properties:
        title:
          type: string
        parentId:
          type: string
    
    ChapterResponse:
      type: object 
      properties:
        success:
         type: boolean
        data:
          type: array
          items:
            $ref: '#/components/schemas/Chapter'
        message:
          type: string
    
    Content:
      type: object
      properties:
        elementType:
          type: string
        data:
          type: string
        file:
          type: file
        tags:
          array:
            type: string
    
    ChapterContent:
      type: object
      properties:
        _id:
          type: string
        parentId:
          type: string
        content:
          array:
            type: object
            items:
              $ref: '#/components/schemas/Content'
    
    ChapterContentRequest:
      type: object
      properties:
        parentId:
          type: string
        content:
          array:
            type: object
            items:
              $ref: '#/components/schemas/Content'
    
    ChapterContentResponse:
      type: object 
      properties:
        success:
         type: boolean
        data:
          type: array
          items:
            $ref: '#/components/schemas/ChapterContent'
        message:
          type: string
    
    ErrorResponse:
      type: object 
      properties:
        success:
         type: boolean
         default: false
        data:
          type: array
          default: null
        message:
          type: string

    UserTop:
      type: object
      properties:
        _id:
          type: string
        username:
          type: string
        score:
          type: number

    UserTopResponse:
      type: object 
      properties:
        success:
         type: boolean
        data:
          type: array
          items:
            $ref: '#/components/schemas/UserTop'
        message:
          type: string

    Test:
      type: object
      properties:
        _id:
          type: string
        testId:
          type: number
        questions:
          type: array
          items:
            type: string
        __v:
          type: number

    TestResponse:
      type: object 
      properties:
        success:
         type: boolean
        data:
          type: array
          items:
            $ref: '#/components/schemas/Test'
        message:
          type: string

    CreateTestRequest:
      type: object
      properties:
        questions:
          type: array
          items:
            type: string

    Answer:
      type: object
      properties:
        _id:
          type: string
        content:
          type: string
        isValid:
          type: boolean

    AnswerRequest:
      type: object
      properties:
        content:
          type: string
        isValid:
          type: boolean

    Question:
      type: object
      properties:
        _id:
          type: string
        question:
          type: string
        image_url:
          type: string
        answers:
          type: array
          items:
            $ref: '#/components/schemas/Answer'
        __v:
          type: number

    QuestionResponse:
      type: object 
      properties:
        success:
         type: boolean
        data:
          type: array
          items:
            $ref: '#/components/schemas/Question'
        message:
          type: string

    QuestionRequest:
      type: object
      properties:
        question:
          type: string
        image_url:
          type: string
        answers:
          type: array
          items:
            $ref: '#/components/schemas/AnswerRequest'

    QuestionUploadRequest:
      type: object
      properties:
        question:
          type: string
        file:
          type: file
        answers:
          type: array
          items:
            $ref: '#/components/schemas/AnswerRequest'

    TestScoreRequest:
      type: object
      properties:
        testId:
          type: number
        score:
          type: number

    TestScoreResponse:
      type: object 
      properties:
        success:
         type: boolean
        data:
          type: array
          items:
            $ref: '#/components/schemas/TestScore'
        message:
          type: string

    TestScore:
      type: object
      properties:
        _id:
          type: string
        testId:
          type: number
        score:
          type: number

    Score:
      type: object
      properties:
        score:
          type: number

security:
  - bearerAuth: []
  
    